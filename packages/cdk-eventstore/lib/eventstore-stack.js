'use strict';
Object.defineProperty(exports, '__esModule', {value: true});
exports.EventStoreStack = void 0;
const cdk = require('@aws-cdk/core');
const dynamodb = require('@aws-cdk/aws-dynamodb');
const kinesis = require('@aws-cdk/aws-kinesis');
const firehose = require('@aws-cdk/aws-kinesisfirehose');
const s3 = require('@aws-cdk/aws-s3');
const iam = require('@aws-cdk/aws-iam');
class EventstoreDb extends cdk.Construct {
  constructor(scope, id, props) {
    super(scope, id);
    this.name = props.name;
    const kinesisStream = new kinesis.Stream(this, 'ChangeStream');
    const archive = this.createArchiveBucket();
    const table = this.createTable(kinesisStream);
    const delivery = this.configDelivery(kinesisStream, archive);
  }
  createTable(kinesisStream) {
    return new dynamodb.Table(this, 'Table', {
      tableName: `${this.name}-store`,
      partitionKey: {name: 'PK', type: dynamodb.AttributeType.STRING},
      sortKey: {name: 'SK', type: dynamodb.AttributeType.STRING},
      kinesisStream,
    });
  }
  createArchiveBucket() {
    return new s3.Bucket(this, 'ArchiveBucket', {
      bucketName: `${this.name}-archive`,
    });
  }
  configDelivery(stream, bucket) {
    const deliveryStreamRole = new iam.Role(this, 'DeliveryRole', {
      assumedBy: new iam.ServicePrincipal('firehose.amazonaws.com'),
    });
    stream.grantRead(deliveryStreamRole);
    stream.grant(deliveryStreamRole, 'kinesis:DescribeStream');
    deliveryStreamRole.addToPolicy(
      new iam.PolicyStatement({
        resources: [bucket.bucketArn, `${bucket.bucketArn}/*`],
        actions: [
          's3:AbortMultipartUpload',
          's3:GetBucketLocation',
          's3:GetObject',
          's3:ListBucket',
          's3:ListBucketMultipartUploads',
          's3:PutObject',
        ],
      })
    );
    const hose = new firehose.CfnDeliveryStream(this, 'DeliveryStream', {
      deliveryStreamName: `${this.name}-delivery-stream`,
      deliveryStreamType: 'KinesisStreamAsSource',
      kinesisStreamSourceConfiguration: {
        kinesisStreamArn: stream.streamArn,
        roleArn: deliveryStreamRole.roleArn,
      },
      s3DestinationConfiguration: {
        bucketArn: bucket.bucketArn,
        bufferingHints: {
          intervalInSeconds: 300,
          sizeInMBs: 2,
        },
        compressionFormat: 'GZIP',
        roleArn: deliveryStreamRole.roleArn,
      },
    });
    return hose;
  }
}
class EventStoreStack extends cdk.Stack {
  constructor(scope, id, props = {}) {
    super(scope, id, props);
    this.db = new EventstoreDb(this, 'EventStore', {
      name: props.stackName,
    });
  }
}
exports.EventStoreStack = EventStoreStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzdG9yZS1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV2ZW50c3RvcmUtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQXFDO0FBQ3JDLGtEQUFrRDtBQUNsRCxnREFBZ0Q7QUFDaEQseURBQXlEO0FBQ3pELHNDQUFzQztBQUN0Qyx3Q0FBd0M7QUFNeEMsTUFBTSxZQUFhLFNBQVEsR0FBRyxDQUFDLFNBQVM7SUFJdEMsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUNsRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQTtRQUV0QixNQUFNLGFBQWEsR0FBRyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFBO1FBRTlELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFBO1FBQzFDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDN0MsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDOUQsQ0FBQztJQUVPLFdBQVcsQ0FBQyxhQUE2QjtRQUMvQyxPQUFPLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFO1lBQ3ZDLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLFFBQVE7WUFDL0IsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDakUsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDNUQsYUFBYTtTQUNkLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxtQkFBbUI7UUFDekIsT0FBTyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRTtZQUMxQyxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxVQUFVO1NBQ25DLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFTyxjQUFjLENBQUMsTUFBc0IsRUFBRSxNQUFpQjtRQUU5RCxNQUFNLGtCQUFrQixHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFO1lBQzVELFNBQVMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyx3QkFBd0IsQ0FBQztTQUM5RCxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBRTNELGtCQUFrQixDQUFDLFdBQVcsQ0FDNUIsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDO1lBQ3RCLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsR0FBRyxNQUFNLENBQUMsU0FBUyxJQUFJLENBQUM7WUFDdEQsT0FBTyxFQUFFO2dCQUNQLHlCQUF5QjtnQkFDekIsc0JBQXNCO2dCQUN0QixjQUFjO2dCQUNkLGVBQWU7Z0JBQ2YsK0JBQStCO2dCQUMvQixjQUFjO2FBQ2Y7U0FDRixDQUFDLENBQ0gsQ0FBQztRQUVGLE1BQU0sSUFBSSxHQUFHLElBQUksUUFBUSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUNsRSxrQkFBa0IsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLGtCQUFrQjtZQUNsRCxrQkFBa0IsRUFBRSx1QkFBdUI7WUFDM0MsZ0NBQWdDLEVBQUU7Z0JBQ2hDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxTQUFTO2dCQUNsQyxPQUFPLEVBQUUsa0JBQWtCLENBQUMsT0FBTzthQUNwQztZQUNELDBCQUEwQixFQUFFO2dCQUMxQixTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7Z0JBQzNCLGNBQWMsRUFBRTtvQkFDZCxpQkFBaUIsRUFBRSxHQUFHO29CQUN0QixTQUFTLEVBQUUsQ0FBQztpQkFDYjtnQkFDRCxpQkFBaUIsRUFBRSxNQUFNO2dCQUN6QixPQUFPLEVBQUUsa0JBQWtCLENBQUMsT0FBTzthQUNwQztTQUNGLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBRUQsTUFBYSxlQUFnQixTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBSTVDLFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsUUFBd0IsRUFBRTtRQUN0RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDN0MsSUFBSSxFQUFFLEtBQUssQ0FBQyxTQUFTO1NBQ3RCLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRjtBQVZELDBDQVVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgZHluYW1vZGIgZnJvbSAnQGF3cy1jZGsvYXdzLWR5bmFtb2RiJztcbmltcG9ydCAqIGFzIGtpbmVzaXMgZnJvbSAnQGF3cy1jZGsvYXdzLWtpbmVzaXMnO1xuaW1wb3J0ICogYXMgZmlyZWhvc2UgZnJvbSAnQGF3cy1jZGsvYXdzLWtpbmVzaXNmaXJlaG9zZSc7XG5pbXBvcnQgKiBhcyBzMyBmcm9tICdAYXdzLWNkay9hd3MtczMnO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ0Bhd3MtY2RrL2F3cy1pYW0nO1xuXG5pbnRlcmZhY2UgRXZlbnRTdG9yZVByb3BzIHtcbiAgbmFtZT86IHN0cmluZ1xufVxuXG5jbGFzcyBFdmVudHN0b3JlRGIgZXh0ZW5kcyBjZGsuQ29uc3RydWN0IHtcblxuICBwcml2YXRlIG5hbWU/OiBzdHJpbmdcblxuICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEV2ZW50U3RvcmVQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZClcbiAgICB0aGlzLm5hbWUgPSBwcm9wcy5uYW1lXG5cbiAgICBjb25zdCBraW5lc2lzU3RyZWFtID0gbmV3IGtpbmVzaXMuU3RyZWFtKHRoaXMsICdDaGFuZ2VTdHJlYW0nKVxuXG4gICAgY29uc3QgYXJjaGl2ZSA9IHRoaXMuY3JlYXRlQXJjaGl2ZUJ1Y2tldCgpXG4gICAgY29uc3QgdGFibGUgPSB0aGlzLmNyZWF0ZVRhYmxlKGtpbmVzaXNTdHJlYW0pXG4gICAgY29uc3QgZGVsaXZlcnkgPSB0aGlzLmNvbmZpZ0RlbGl2ZXJ5KGtpbmVzaXNTdHJlYW0sIGFyY2hpdmUpXG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVRhYmxlKGtpbmVzaXNTdHJlYW06IGtpbmVzaXMuU3RyZWFtKSB7XG4gICAgcmV0dXJuIG5ldyBkeW5hbW9kYi5UYWJsZSh0aGlzLCAnVGFibGUnLCB7XG4gICAgICB0YWJsZU5hbWU6IGAke3RoaXMubmFtZX0tc3RvcmVgLFxuICAgICAgcGFydGl0aW9uS2V5OiB7IG5hbWU6ICdQSycsIHR5cGU6IGR5bmFtb2RiLkF0dHJpYnV0ZVR5cGUuU1RSSU5HIH0sXG4gICAgICBzb3J0S2V5OiB7IG5hbWU6ICdTSycsIHR5cGU6IGR5bmFtb2RiLkF0dHJpYnV0ZVR5cGUuU1RSSU5HIH0sXG4gICAgICBraW5lc2lzU3RyZWFtXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUFyY2hpdmVCdWNrZXQoKSB7XG4gICAgcmV0dXJuIG5ldyBzMy5CdWNrZXQodGhpcywgJ0FyY2hpdmVCdWNrZXQnLCB7XG4gICAgICBidWNrZXROYW1lOiBgJHt0aGlzLm5hbWV9LWFyY2hpdmVgXG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgY29uZmlnRGVsaXZlcnkoc3RyZWFtOiBraW5lc2lzLlN0cmVhbSwgYnVja2V0OiBzMy5CdWNrZXQpIHtcblxuICAgIGNvbnN0IGRlbGl2ZXJ5U3RyZWFtUm9sZSA9IG5ldyBpYW0uUm9sZSh0aGlzLCAnRGVsaXZlcnlSb2xlJywge1xuICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoXCJmaXJlaG9zZS5hbWF6b25hd3MuY29tXCIpLFxuICAgIH0pO1xuICAgIHN0cmVhbS5ncmFudFJlYWQoZGVsaXZlcnlTdHJlYW1Sb2xlKTtcbiAgICBzdHJlYW0uZ3JhbnQoZGVsaXZlcnlTdHJlYW1Sb2xlLCBcImtpbmVzaXM6RGVzY3JpYmVTdHJlYW1cIik7XG5cbiAgICBkZWxpdmVyeVN0cmVhbVJvbGUuYWRkVG9Qb2xpY3koXG4gICAgICBuZXcgaWFtLlBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgIHJlc291cmNlczogW2J1Y2tldC5idWNrZXRBcm4sIGAke2J1Y2tldC5idWNrZXRBcm59LypgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgIFwiczM6QWJvcnRNdWx0aXBhcnRVcGxvYWRcIixcbiAgICAgICAgICBcInMzOkdldEJ1Y2tldExvY2F0aW9uXCIsXG4gICAgICAgICAgXCJzMzpHZXRPYmplY3RcIixcbiAgICAgICAgICBcInMzOkxpc3RCdWNrZXRcIixcbiAgICAgICAgICBcInMzOkxpc3RCdWNrZXRNdWx0aXBhcnRVcGxvYWRzXCIsXG4gICAgICAgICAgXCJzMzpQdXRPYmplY3RcIixcbiAgICAgICAgXSxcbiAgICAgIH0pLFxuICAgICk7XG5cbiAgICBjb25zdCBob3NlID0gbmV3IGZpcmVob3NlLkNmbkRlbGl2ZXJ5U3RyZWFtKHRoaXMsICdEZWxpdmVyeVN0cmVhbScsIHtcbiAgICAgIGRlbGl2ZXJ5U3RyZWFtTmFtZTogYCR7dGhpcy5uYW1lfS1kZWxpdmVyeS1zdHJlYW1gLFxuICAgICAgZGVsaXZlcnlTdHJlYW1UeXBlOiBcIktpbmVzaXNTdHJlYW1Bc1NvdXJjZVwiLFxuICAgICAga2luZXNpc1N0cmVhbVNvdXJjZUNvbmZpZ3VyYXRpb246IHtcbiAgICAgICAga2luZXNpc1N0cmVhbUFybjogc3RyZWFtLnN0cmVhbUFybixcbiAgICAgICAgcm9sZUFybjogZGVsaXZlcnlTdHJlYW1Sb2xlLnJvbGVBcm5cbiAgICAgIH0sXG4gICAgICBzM0Rlc3RpbmF0aW9uQ29uZmlndXJhdGlvbjoge1xuICAgICAgICBidWNrZXRBcm46IGJ1Y2tldC5idWNrZXRBcm4sXG4gICAgICAgIGJ1ZmZlcmluZ0hpbnRzOiB7XG4gICAgICAgICAgaW50ZXJ2YWxJblNlY29uZHM6IDMwMCxcbiAgICAgICAgICBzaXplSW5NQnM6IDIsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbXByZXNzaW9uRm9ybWF0OiBcIkdaSVBcIixcbiAgICAgICAgcm9sZUFybjogZGVsaXZlcnlTdHJlYW1Sb2xlLnJvbGVBcm4sXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhvc2U7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEV2ZW50U3RvcmVTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG5cbiAgZGI6IEV2ZW50c3RvcmVEYlxuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogY2RrLlN0YWNrUHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuICAgIHRoaXMuZGIgPSBuZXcgRXZlbnRzdG9yZURiKHRoaXMsICdFdmVudFN0b3JlJywge1xuICAgICAgbmFtZTogcHJvcHMuc3RhY2tOYW1lXG4gICAgfSlcbiAgfVxufVxuIl19
